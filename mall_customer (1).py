# -*- coding: utf-8 -*-
"""mall customer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RE6C_X60MvM-wMT7NZxK9XC-MIR0EFa9
"""

from google.colab import drive
drive.mount('/content/gdrive')

"""Importing the Dependencies"""

import numpy as  np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans, DBSCAN
from sklearn.preprocessing import StandardScaler

import warnings
warnings.filterwarnings("ignore")

"""Data Collection & Analysis"""

# loading the data from csv file to a Pandas DataFrame
customer_data = pd.read_csv('/content/gdrive/MyDrive/data sciences project internship/Mall_Customers.csv')

# first 5 rows in the dataframe
customer_data.head()

# finding the number of rows and columns
customer_data.shape

# getting some informations about the dataset
customer_data.info()

# checking for missing values
customer_data.isnull().sum()

if customer_data.duplicated().sum() == 0:
    print("There are no duplicates")
else:
    print(customer_data.duplicated().sum())

customer_data.describe()

"""Data Visualization"""

colors = ["#FCD8CD", "#C4D9FF"]

plt.figure(figsize=(12, 8))
gender_count = customer_data["Gender"].value_counts()
plt.pie(gender_count, labels = gender_count.index,
        autopct='%1.1f%%', colors=colors, textprops={'fontsize':12})
centre_circle = plt.Circle((0,0), 0.4, fc='white')
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
plt.title("Customers' Gender Distribution", fontsize=18)
plt.show()

color = "#C5B0CD"
plt.figure(figsize=(10, 8))
ax = sns.histplot(x=customer_data["Age"], data=customer_data, color=color, kde="True", bins=20)
plt.xlabel("Age")
plt.ylabel("Count")
plt.title("Customers' Age Distribution")
for container in ax.containers:
    ax.bar_label(container, fontsize=7)
plt.show()

color = "#123524"
plt.figure(figsize=(10, 8))
ax = sns.histplot(x=customer_data["Annual Income (k$)"], data=customer_data, color=color, kde="True", bins=10)
plt.xlabel("Annual Income (k$)")
plt.ylabel("Count")
plt.title("Customers' Annual Income (k$)")
for container in ax.containers:
    ax.bar_label(container, fontsize=7)
plt.show()

color = "#A5B68D"
plt.figure(figsize=(10, 8))
ax = sns.histplot(x=customer_data["Spending Score (1-100)"], data=customer_data, color=color, kde="True", bins=10)
plt.xlabel("Spending Score")
plt.ylabel("Count")
plt.title("Customers' Spending Score")
for container in ax.containers:
    ax.bar_label(container, fontsize=7)
plt.show()

plt.figure(figsize=(20, 10))
sns.pairplot(customer_data, hue="Gender", height = 4, palette = {"Male":"lightblue", "Female":"pink"})
plt.show()

features = ["Age", "Annual Income (k$)", "Spending Score (1-100)"]

fig, axes = plt.subplots(1, 3, figsize=(18, 8))

for i, feature in enumerate(features):
    sns.boxplot(x="Gender", y=feature, data=customer_data, ax=axes[i], palette={"Male":"lightblue", "Female":"pink"})
    axes[i].set_title(f"Gender vs {feature}")

plt.tight_layout()
plt.show()

scaler = StandardScaler()

X = customer_data[["Annual Income (k$)", "Spending Score (1-100)"]]
Xscaled = scaler.fit_transform(X)

inertia = []
for k in range(1, 11):
    kmeans=KMeans(n_clusters=k, random_state=42)
    kmeans.fit(Xscaled)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), inertia, color="#789DBC", marker="v",
        markerfacecolor="#D92C54", markeredgecolor="#D92C54",
        linewidth=3.5, markersize=8)
plt.xlabel("Number of Clusters")
plt.ylabel("Inertia")
plt.grid()
plt.show()

kmeans = KMeans(n_clusters=5, random_state=42)
clstrs = kmeans.fit_predict(Xscaled)

customer_data["Clusters"] = clstrs

customer_data.head()

plt.figure(figsize=(10, 8))

for i in range(5):
    cluster_data = customer_data[customer_data["Clusters"] == i]
    plt.scatter(
        x=cluster_data["Annual Income (k$)"],
        y=cluster_data["Spending Score (1-100)"],
        s=100, alpha=0.8, label=f'Cluster {i}'
    )


plt.xlabel("Annual Income (k$)")
plt.ylabel("Spending Score (1-100)")
plt.title("Customers Clustering")
plt.legend(loc="center right")
plt.show()